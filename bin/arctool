#!/usr/bin/env
"""Manage archiving of data."""

import argparse

import click

from dtool import create_archive, create_manifest, new_archive

def main():

    parser = argparse.ArgumentParser(description=__doc__)

    subparsers = parser.add_subparsers(help='sub-command help',
                                       dest='subparser_name')

    manifest_p = subparsers.add_parser('manifest', help='Manage data manifest')
    manifest_sps = manifest_p.add_subparsers()
    manifest_create_p = manifest_sps.add_parser('create',
                                                help='Create data manifest')
    manifest_create_p.set_defaults(func=create_manifest)
    manifest_create_p.add_argument('data_path', help='Path to data')

    archive_p = subparsers.add_parser('archive',
                                      help='Manage data archive')
    archive_sps = archive_p.add_subparsers()
    archive_creates_p = archive_sps.add_parser('create',
                                               help='Create data archive')
    archive_creates_p.set_defaults(func=create_archive)
    archive_creates_p.add_argument('data_path', help='Path to data')

    args = parser.parse_args()

    args.func(args)


@click.group()
def cli():
    pass

@cli.command()
@click.option('--staging_path',
              help='Path to staging area where new archive will be created',
              default='.',
              type=click.Path(exists=True))
def new(staging_path):
    print('Starting new archive in {}'.format(staging_path))
    new_archive(staging_path)

@cli.group()
def manifest():
    pass

@manifest.command()
@click.argument('path', 'Path to archive directory.',
                type=click.Path(exists=True))
def create(path):
    create_manifest(path)

@cli.group()
def archive():
    pass

#cli = click.CommandCollection(sources=[manifest, archive, init])

if __name__ == "__main__":
    cli()
